/*
# Criação do Esquema Inicial do Banco de Dados

## Descrição da Query:
Este script estabelece a estrutura fundamental para o sistema de reservas da excursão. Ele cria as tabelas para configurações, passageiros, assentos e reservas, além de configurar o armazenamento de arquivos para a logo e definir as políticas de segurança de acesso aos dados (RLS).

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "High"
- Requires-Backup: false
- Reversible: false

## Detalhes da Estrutura:
- Tabelas Criadas: settings, passengers, seats, reservations, reservation_seats.
- Storage Criado: Bucket 'assets' para logos e outros arquivos públicos.
- Políticas de Segurança: Ativação do RLS em todas as tabelas com políticas específicas para acesso público e de administrador (anônimo).

## Implicações de Segurança:
- RLS Status: Habilitado em todas as tabelas.
- Mudanças de Política: Sim, políticas são definidas para garantir que usuários anônimos possam ler dados públicos (configurações, assentos) mas não possam modificar informações sensíveis.
- Requisitos de Autenticação: O acesso de escrita será restrito. Atualmente, como não há autenticação de admin, as políticas são baseadas na chave 'anon'. Em produção, isso deve ser alterado para um role de admin autenticado.

## Impacto de Performance:
- Índices: Chaves primárias e estrangeiras criam índices automaticamente.
- Triggers: Nenhum trigger é adicionado neste script inicial.
- Impacto Estimado: Baixo, pois é a criação da estrutura.
*/

-- PASSO 1: Configurar o Armazenamento (Storage) para a logo
-- Cria o bucket 'assets' para armazenar arquivos públicos como a logo.
insert into storage.buckets
  (id, name, public)
values
  ('assets', 'assets', true)
on conflict (id) do nothing;

-- Define as políticas de acesso para o bucket 'assets'.
-- Permite que qualquer pessoa visualize (SELECT) os arquivos.
drop policy if exists "Public Read Access" on storage.objects;
create policy "Public Read Access"
on storage.objects for select
using ( bucket_id = 'assets' );

-- Permite que usuários anônimos (com a chave anon) façam upload (INSERT) e update (UPDATE) de arquivos.
-- ATENÇÃO: Em um ambiente de produção, isso deve ser restrito a usuários autenticados/administradores.
drop policy if exists "Anon Upload/Update Access" on storage.objects;
create policy "Anon Upload/Update Access"
on storage.objects for insert
with check ( bucket_id = 'assets' );

drop policy if exists "Anon Update Access" on storage.objects;
create policy "Anon Update Access"
on storage.objects for update
using ( bucket_id = 'assets' );

drop policy if exists "Anon Delete Access" on storage.objects;
create policy "Anon Delete Access"
on storage.objects for delete
using ( bucket_id = 'assets' );


-- PASSO 2: Criar a tabela de Configurações (Settings)
-- Armazena configurações globais do sistema, como a URL da logo.
create table if not exists public.settings (
  id bigint primary key generated by default as identity,
  key text not null unique,
  value text
);

-- Habilita Row Level Security (RLS) para a tabela de configurações.
alter table public.settings enable row level security;

-- Política de Leitura Pública: Qualquer pessoa pode ler as configurações.
drop policy if exists "Public can read settings" on public.settings;
create policy "Public can read settings"
on public.settings for select
using (true);

-- Política de Escrita para Anônimos: Permite que a chave anônima atualize as configurações.
-- ATENÇÃO: Em produção, restrinja isso a um role de 'admin' autenticado.
drop policy if exists "Anon can update settings" on public.settings;
create policy "Anon can update settings"
on public.settings for update
using (true) with check (true);

drop policy if exists "Anon can insert settings" on public.settings;
create policy "Anon can insert settings"
on public.settings for insert
with check (true);


-- Insere os valores iniciais de configuração.
insert into public.settings (key, value) values
  ('logoUrl', 'https://i.ibb.co/Stx3pW7/logo-comadesma-gold.png'),
  ('whatsappNumber', '5562999999999'),
  ('reservationTimeout', '24')
on conflict (key) do update set value = excluded.value;


-- PASSO 3: Criar a tabela de Passageiros (Passengers)
create table if not exists public.passengers (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  cpf text not null unique,
  email text not null,
  phone text not null,
  birth_date date not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.passengers enable row level security;
drop policy if exists "Public can access passengers" on public.passengers;
create policy "Public can access passengers" on public.passengers for all using (true) with check (true);


-- PASSO 4: Criar a tabela de Assentos (Seats)
create table if not exists public.seats (
  id text primary key, -- ex: 'leito-1', 'semi-leito-20'
  "number" integer not null,
  "type" text not null, -- 'leito' ou 'semi-leito'
  floor text not null, -- 'inferior' ou 'superior'
  price numeric(10, 2) not null
);

alter table public.seats enable row level security;
drop policy if exists "Public can read seats" on public.seats;
create policy "Public can read seats" on public.seats for select using (true);

-- Popula a tabela de assentos
TRUNCATE public.seats RESTART IDENTITY CASCADE;
-- 12 assentos leito
insert into public.seats (id, "number", "type", floor, price)
select
  'leito-' || i,
  i,
  'leito',
  'inferior',
  950.00
from generate_series(1, 12) as i;
-- 44 assentos semi-leito
insert into public.seats (id, "number", "type", floor, price)
select
  'semi-leito-' || i,
  i + 12,
  'semi-leito',
  'superior',
  800.00
from generate_series(1, 44) as i;


-- PASSO 5: Criar a tabela de Reservas (Reservations)
create table if not exists public.reservations (
  id uuid primary key default gen_random_uuid(),
  passenger_id uuid references public.passengers(id) on delete set null,
  status text not null default 'reserved', -- 'reserved', 'confirmed', 'expired'
  total_price numeric(10, 2) not null,
  payment_method text,
  installments integer,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  expires_at timestamp with time zone
);

alter table public.reservations enable row level security;
drop policy if exists "Public can access reservations" on public.reservations;
create policy "Public can access reservations" on public.reservations for all using (true) with check (true);

-- PASSO 6: Criar a tabela de junção Reservation_Seats
create table if not exists public.reservation_seats (
  reservation_id uuid not null references public.reservations(id) on delete cascade,
  seat_id text not null references public.seats(id) on delete restrict,
  primary key (reservation_id, seat_id)
);

alter table public.reservation_seats enable row level security;
drop policy if exists "Public can access reservation_seats" on public.reservation_seats;
create policy "Public can access reservation_seats" on public.reservation_seats for all using (true) with check (true);
